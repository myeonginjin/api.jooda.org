{
	"viewset generator": {
		"prefix": "viewset",
		"body": [
		  "from django.utils.decorators import method_decorator",
		  "",
		  "from rest_framework.viewsets import mixins, GenericViewSet",
		  "from rest_framework.decorators import action",
		  "",
		  "from common import response, pagination, decorators, enums",
		  "",
		  "",
		  "",
		  "class ${1:${TM_FILENAME_BASE}}(mixins.$2, GenericViewSet):",
		  "  http_method_names = [\"$3\"]"
		],
		"description": "viewset generator"
	},
	"serializer generator": {
		"prefix": "serializer",
		"body": [
		  "from rest_framework import serializers",
		  "",
		  "from apps.$1.models import ${2}",
		  "",
		  "",
		  "class ${3:${TM_FILENAME_BASE}}(serializers.ModelSerializer):",
		  "",
		  "    class Meta:",
		  "        model = ${2}",
		  "        fields = (",
		  "            $4,",
		  "        )"
		],
		"description": "serializer generator"
	},
	"model generator": {
		"prefix": "model",
		"body": [
		  "from django.db import models",
		  "import uuid",
		  "",
		  "",
		  "class ${1}(models.Model):",
		  "    id = models.AutoField(",
		  "        primary_key=True,",
		  "        unique=True,",
		  "        editable=False,",
		  "        verbose_name=\"${2} pk\",",
		  "    )",
		  "    uuid_id = models.UUIDField(",
		  "        primary_key=True,",
		  "        unique=True,",
		  "        editable=False,",
		  "        default=uuid.uuid4,",
		  "        verbose_name=\"${2} pk\",",
		  "    )",
		  "    # 외래키",
		  "    foriegnModel = models.ForeignKey(",
    	  "        \"{app}.{model}\",",
    	  "        blank=True,",
    	  "        null=True,",
    	  "        on_delete=models.SET_NULL,",
    	  "        related_name=\"${1}\",",
    	  "        db_index=True,",
    	  "    )" ,
		  "",
		  "    def __str__(self):",
		  "        return ",
		  "    def save(self, *args, **kwargs):",
          "        super().save(*args, **kwargs)",
		  "",
		  "    class Meta:",
		  "        verbose_name = \"${3} ${2} 정보\"",
		  "        verbose_name_plural = \"${3} ${2} 정보\""
		],
		"description": "model generator"
	},
	"model admin generator": {
		"prefix": "admin model",
		"body": [
		  "from django import forms",
		  "from django.contrib import admin",
		  "",
		  "",
		  "class ${1}(admin.ModelAdmin):",
		  "    search_fields = (\"id\",)",
		  "    list_display = [",
		  "        \"id\",",
		  "    ]",
		  "    list_display_link = [\"id\"]",
		  "    ordering = [\"${3}\"]",
		  "    list_per_page = 15",
		  "    raw_id_fields = [\"${2}\"]",
		  "",
		  "    def get_form(self, request, obj=None, **kwargs):",
		  "        self.exclude = (\"${4}\",)",
		  "        form = super(${1}, self).get_form(request, obj, **kwargs)",
		  "        return form",
		  ""
		],
		"description": "model admin generator"
	},
	"admin inline generator": {
		"prefix": "admin inline",
		"body": [
		  "from ${1}.models import ${2}",
		  "",
		  "class ${3}(admin.TabularInline):",
		  "    model = ${2}",
		  "    exclude = [",
		  "        \"${4}\",",
		  "    ]",
		  "    extra = ${5}"
		],
		"description": "admin inline generator"
	},
	"admin register generator": {
		"prefix": "admin register",
		"body": [
		  "from ${1}.models import ${2}",
		  "from ${1}.admin import ${2}Admin",
		  "",
		  "admin_site.register(${2}, ${2}Admin)"
		],
		"description": "admin register generator"
	},
	"test view set": {
		"prefix": "test view",
		"body": [
		  "from django.test import Client, TestCase",
		  "import json",
		  "from ${1}.models import ${2}",
		  "from common import response, pagination, decorators, enums",
		  "",
		  "get_content_to_response = lambda response: json.loads(response.content.decode(\"utf-8\"))",
		  "",
		  "",
		  "class ${2}ViewsTest(TestCase):",
		  "    def setUp(self) -> None:",
		  "        settings.TEST = True",
		  "        self.client = Client()",
		  "        self.${1} = ${2}.object.create()",
		  "        self.${1} = ${2}.objects.all()",
		  "",
		  "        return super().setUp()",
		  "",
		  "    def test_${3}(self):",
		  "        api_url = f\"/{Common.ApiUrl.V1}/\"",
		  "        data = {}",
		  "        response = self.client.post(",
		  "            api_url,",
		  "            data,",
		  "        )",
		  ""
		],
		"description": "test view set"
	},
}